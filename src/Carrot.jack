class Carrot{

    // function int get_location(int Ay, int Ax){
    //     //16-pixel grid
    //     //16 in height, 32 in width
    //     if ((Ax > -1) & (Ax < 32) & (Ay > -1) & (Ay + 16 < 256)) { return (Ay*32*16) + Ax; }
        
    //     return 52;
    // }

    // function void set_YX(int new_y, int new_x){
    //     if ((new_x > -1) & (new_x < 32)) { let x = new_x; }
    //     if ((new_y > -1) & (new_y + 16 < 256)) { let y = new_y; }
    //     return;
    // }

    function void draw_LEGACY(int location) {
        var int memAddress;
        let memAddress = 16384 + location;
        do Memory.poke(memAddress + 0, 2336);
        do Memory.poke(memAddress + 32, 3424);
        do Memory.poke(memAddress + 64, 1984);
        do Memory.poke(memAddress + 96, 896);
        do Memory.poke(memAddress + 128, 1984);
        do Memory.poke(memAddress + 160, 2080);
        do Memory.poke(memAddress + 192, 5648);
        do Memory.poke(memAddress + 224, 4208);
        do Memory.poke(memAddress + 256, 5904);
        do Memory.poke(memAddress + 288, 2080);
        do Memory.poke(memAddress + 320, 2272);
        do Memory.poke(memAddress + 352, 1600);
        do Memory.poke(memAddress + 384, 1088);
        do Memory.poke(memAddress + 416, 640);
        do Memory.poke(memAddress + 448, 896);
        do Memory.poke(memAddress + 480, 256);
        return;
    }

    function void erase_LEGACY(int location) {
        var int memAddress;
        let memAddress = 16384 + location;
        do Memory.poke(memAddress + 0, 0);
        do Memory.poke(memAddress + 32, 0);
        do Memory.poke(memAddress + 64, 0);
        do Memory.poke(memAddress + 96, 0);
        do Memory.poke(memAddress + 128, 0);
        do Memory.poke(memAddress + 160, 0);
        do Memory.poke(memAddress + 192, 0);
        do Memory.poke(memAddress + 224, 0);
        do Memory.poke(memAddress + 256, 0);
        do Memory.poke(memAddress + 288, 0);
        do Memory.poke(memAddress + 320, 0);
        do Memory.poke(memAddress + 352, 0);
        do Memory.poke(memAddress + 384, 0);
        do Memory.poke(memAddress + 416, 0);
        do Memory.poke(memAddress + 448, 0);
        do Memory.poke(memAddress + 480, 0);

        return;
    }
}