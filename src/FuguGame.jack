/** game state */
class FuguGame {
    field Fugu fugu;
    field int direction;
    //field Carrot carrot;
    field Carrots carrots;
    field int carrots_len;
    field int final_carrots_used;

    field Array carrot_xx;
    field Array carrot_yy;

    field int carrot_h;
     

    constructor FuguGame new(){
        let fugu = Fugu.new(0,0);
        let carrots_len = 10;
        let carrot_h = 16;
        let carrots = Carrots.new(carrots_len);
        let carrot_xx = carrots.getXX();
        let carrot_yy = carrots.getYY();
        //let carrots = Array.new(carrots_len);
        //let carrots = Carrots.new(carrots_len);
        // let carrot_xx = Array.new(carrots_len);
        // let carrot_yy = Array.new(carrots_len);
        //let carrot = Carrot.new(40,7);

        let direction = 0;
        return this;
    }

    method void dispose(){
        do fugu.dispose();
        do carrots.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method int calc_location(int Ay, int Ax){
        //16-pixel grid
        //16 in height, 32 in width
        return Ay*32*16 + Ax;
    }

    method void moveFugu(){
        if (direction = 1) { do fugu.moveLeft(); }
        if (direction = 2) { do fugu.moveUp(); }
        if (direction = 3) { do fugu.moveRight(); }
        if (direction = 4) { do fugu.moveDown(); }
        return;
    }

    method void run(){

        var Array carrots_is_not_displayed; //сюда пихаю boolean
        var Array bubbles_is_not_displayed; //сюда пихаю boolean
        var char key;
        var boolean exit;
        var boolean restart;
        var boolean isCollided;
        var String str;
        var int car_l;
        var boolean even_check;
        var Array bubbles;
        var int bubbles_len;
        var Carrot carrot_temp;

        var int fugu_x;
        var int fugu_y;
        var int fugu_h;

        var int carrots_used;
        
        let exit = false;
        let isCollided = false;
        let carrots_used = 0;
        //do carrot.draw();
        let str = "You loser :)))";
        let car_l = 3;
        let even_check = true;
        let fugu_x = 0;
        let fugu_y = 0;
        let fugu_h = fugu.getHeight();

        while (~exit){
            let key = 1;

            while (~((key = 0) | (exit = true) | (isCollided = true))) {
                let key = Keyboard.keyPressed();
                if (key = 81) { let exit = true; }

                if ((key = 67) & (carrots_used < (carrots_len))) {
                    let carrots_used = carrots_used + 1;
                    do Carrot.draw_LEGACY(carrot_yy[(carrots_used-1)]*32*16 + carrot_xx[(carrots_used-1)]);
                    do Sys.wait(100);
                }

                if ((key = 130) | (key = 131) | (key = 132) | (key = 133)) {
                    let direction = key - 129;
                    do moveFugu();
                    //должно меняться: 0 и 1, 1 и 0
                    //do moveCarrots(carrots_used, car_l);
                    do Sys.wait(30);
                    //let fugu.x = 10; нельзя так делать
                    
                    //if (isCollided){
                    //    do fugu.erase();
                    //}
                    let car_l = -car_l;
                }
                let fugu_x = fugu.getX();
                let fugu_y = fugu.getY();
                let isCollided = Collision.IsCollided_Multiple_One(fugu_x, fugu_y, fugu_h, carrot_xx, carrot_yy, carrot_h, carrots_len);
            }
            while (isCollided){
                
                do fugu.erase();
                do Output.moveCursor(4, 4);
                do Output.printString(str);
                do str.dispose();
                let key = Keyboard.keyPressed();
                if (key = 53){
                    let isCollided = false;
                    do Screen.clearScreen();
                    let carrots_used = 0;
                    do fugu.set_YX(0,0);
                    do fugu.draw();
                }
            }

        }
        return;
    }



    // method void moveCarrots(int count, int carrot_shift){
    //     var int i;
    //     let i = 0;
    //     while (i < count){
    //         //do moveCarrot(carrots[i], carrot_shift);
    //         let i = i+1;
    //     }
    //     return;
    // }

    // method void moveCarrot(Carrot carrot, int car_l){
    //     // находит кратчайший путь до рыбы
    //     // по алгоритму построения прямой (8 штук его делать не нужно, 
    //     // просто переставлять аргументы местами и для +-1 сделать отдельный параметр)
    //     do carrot.erase();
    //     do carrot.set_YX(carrot.getY()+car_l, carrot.getX());
    //     //do Sys.wait(5);
    //     do carrot.draw();
    //     return;
    // }

    

}