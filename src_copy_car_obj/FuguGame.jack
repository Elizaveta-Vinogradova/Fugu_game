/** game state */
class FuguGame {
    field Fugu fugu;
    field int direction;
    //field Carrot carrot;
    field Array carrots;
    field int carrots_len;
    field int final_carrots_used;

    field Array carrot_xx;
    field Array carrot_yy;

    field int carrot_h;
    field Array beaten_carrots;
     

    constructor FuguGame new(){
        let fugu = Fugu.new(0,0);
        let carrots_len = 10;
        let carrots = Array.new(carrots_len);
        
        do carrots_assemble();
        //let carrot = Carrot.new(40,7);

        let direction = 0;
        return this;
    }

    method void dispose(){
        do fugu.dispose();
        
        do Memory.deAlloc(this);
        return;
    }

    method void carrots_assemble(){
        let carrots[0] = Carrot.new(3,5);
        let carrots[1] = Carrot.new(7,31);
        let carrots[2] = Carrot.new(12,14);
        let carrots[3] = Carrot.new(7,16);
        let carrots[4] = Carrot.new(6,7);
        let carrots[5] = Carrot.new(11,8);
        let carrots[6] = Carrot.new(8,4);
        let carrots[7] = Carrot.new(15,4);
        let carrots[8] = Carrot.new(14,23);
        let carrots[9] = Carrot.new(5,6);
        return;
    }

    method void carrots_beaten_assemble(){
        let beaten_carrots[0] = false;
        let beaten_carrots[1] = false;
        let beaten_carrots[2] = false;
        let beaten_carrots[3] = false;
        let beaten_carrots[4] = false;
        let beaten_carrots[5] = false;
        let beaten_carrots[6] = false;
        let beaten_carrots[7] = false;
        let beaten_carrots[8] = false;
        let beaten_carrots[9] = false;
        return;
    }

    method int calc_location(int Ay, int Ax){
        //16-pixel grid
        //256 in height, 32 in width
        return Ay*32 + Ax;
    }

    method void moveFugu(){
        if (direction = 1) { do fugu.moveLeft(); }
        if (direction = 2) { do fugu.moveUp(); }
        if (direction = 3) { do fugu.moveRight(); }
        if (direction = 4) { do fugu.moveDown(); }
        return;
    }

    method void moveCarrots(int count, int goalX, int goalY){
        var int i;
        let i = 0;
        while (i < count){
            do moveCarrot(carrots[i], goalX, goalY);
            let i = i+1;
        }
        return;
    }

    method void moveCarrot(Carrot carrot, int goalX, int goalY){
        // находит кратчайший путь до рыбы
        // по алгоритму построения прямой (8 штук его делать не нужно, 
        // просто переставлять аргументы местами и для +-1 сделать отдельный параметр)
        do carrot.erase();
        //do carrot.set_YX(carrot.getY()+car_l, carrot.getX());
        //do Sys.wait(5);
        do carrot.draw();
        return;
    }

    method void run(){

        var Array carrots_is_not_displayed; //сюда пихаю boolean
        var Array bubbles_is_not_displayed; //сюда пихаю boolean
        var char key;
        var boolean exit;
        var boolean restart;
        var boolean isCollided;
        var String str;
        var int car_l;
        var boolean even_check;
        var Array bubbles;
        var int bubbles_len;
        var Carrot carrot_temp;

        var int carrots_used;
        var int fugu_x;
        var int fugu_y;
        
        
        let exit = false;
        let isCollided = false;
        let carrots_used = 0;
        //do carrot.draw();
        let str = "You loser :)))";
        let car_l = 3;
        let even_check = true;

        let fugu_x = 0;
        let fugu_y = 0;

        while (~exit){
            let key = 1;

            while (~((key = 0) | (exit = true) | (isCollided = true))) {
                let key = Keyboard.keyPressed();
                do Sys.wait(30);
                if (key = 81) { let exit = true; }

                if ((key = 67) & (carrots_used < (carrots_len))) {
                    let carrots_used = carrots_used + 1;
                    let carrot_temp = carrots[(carrots_used - 1)];
                    do carrot_temp.draw();
                    do Sys.wait(100);
                }

                if ((key = 130) | (key = 131) | (key = 132) | (key = 133)) {
                    let direction = key - 129;
                    do moveFugu();
                    let fugu_x = fugu.getX();
                    let fugu_y = fugu.getY();
                    //должно меняться: 0 и 1, 1 и 0
                    //let fugu.x = 10; нельзя так делать
                    do moveCarrots(carrots_used, fugu_x, fugu_y);
                    //if (isCollided){
                    //    do fugu.erase();
                    //}
                    //let car_l = -car_l;
                }
                let isCollided = IsCollided_LEGACY_Multiple(carrots_used);
            }
            while (isCollided){
                
                do fugu.erase();
                do Output.moveCursor(4, 4);
                do Output.printString(str);
                do str.dispose();
                let key = Keyboard.keyPressed();
                if (key = 53){
                    let isCollided = false;
                    do Screen.clearScreen();
                    let carrots_used = 0;
                    do fugu.set_YX(0,0);
                    do fugu.draw();
                }
            }
        }
        return;
    }

    method boolean IsCollided_LEGACY (Carrot carrot) {
        var int xc;
        var int yc;
        var int xf;
        var int yf;
        let xc = carrot.getX();
        let yc = carrot.getY();
        let xf = fugu.getX();
        let yf = fugu.getY();
        return (xc = xf) & (yc = yf);
    }

    method boolean IsCollided_LEGACY_Multiple (int cars_used) {
        var int i;
        var boolean isCollided;
        let i = 0;
        let isCollided = false;
        while (i < cars_used){
            let isCollided = isCollided | IsCollided_LEGACY(carrots[i]);
            let i = (i+1);
        }
        return isCollided;
    }

    method boolean IsCollided (int x1, int y1, int h1, int x2, int y2, int h2) {
        //1 - gets destroyed, 2 - survives and thrives
        return ((x2 = x1) & ( ((y2 - 1) < (y1 + h1 - 1)) & (((y1 + h1 - 1) < (y2 + h2))  | ( ((y2 + h2) > y1) & (y1 > (y2 - 1)) ) )));
    }

    

    

}